# Copyright 2025 Cisco Systems, Inc. and its affiliates
#
# SPDX-License-Identifier: Apache-2.0
# TODO(https://github.com/RobustIntelligence/faith/issues/197): this benchmark
#   contains questions with multiple correct answers.
#   This is not supported by the MCQA benchmark format.
#
# current correct answer set: 'B' 'D' 'A' 'C' 'ABCD' 'ABD' 'AC' 'BC' 'CD' 'ACD'
---
benchmark: !from
  '$BENCHMARKS_ROOT/mcqa-template.yaml["mcqa_common_benchmark"]':
    metadata: !from
      '$BENCHMARKS_ROOT/base-template.yaml["metadata"]':
        name: "secbench-mcqa-eng"
        description: |-
          SecBench is a benchmark designed to evaluate the performance of
          AI models in the field of computer security. The full benchmark has
          2,730 multiple-choice questions, each with four answer choices. This
          subset of 595 questions includes only the English questions, with each
          question having one correct answer labeled as 'A', 'B', 'C', or 'D'.
        urls:
          - https://arxiv.org/abs/2412.20787
          - https://secbench.org/
          - https://github.com/secbench-git/SecBench
        categories: ["security"]
    source:
      git_repo: !from
        '$BENCHMARKS_ROOT/sources-template.yaml["sources"]["git_repo"]':
          repo_url: "https://github.com/secbench-git/SecBench"
          branch: "main"
          commit: "3a148abb6383c8e6be7863dd5c65b57ee2d59436"
          type: "jsonl"
          path_glob: "data/MCQs_2730.jsonl"
          selected_columns: null
      options:
        dataframe_transform_expr: |
          df.assign(
              question=df["question"].str.strip(),
              answer=df["label"].str.strip().str.upper(),
              choices=df["answers"],
          )[
              # Filter for English questions only.
              # Some questions are labeled as "English" but have Chinese chars.
              # We filter these out to ensure we only include English questions.
              df["language"].eq("English") &
              ~df["question"].str.contains(r'[\u4e00-\u9fff]', regex=True) &
              df["label"].str.strip().str.upper().isin(["A", "B", "C", "D"])
          ][["question", "choices", "answer"]]
